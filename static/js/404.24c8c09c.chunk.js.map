{"version":3,"file":"static/js/404.24c8c09c.chunk.js","mappings":"+LAGaA,GAAaC,E,QAAAA,IAAOC,EAAAA,GAAPD,CAAH,kM,SCDVE,EAAS,WAClB,OACI,4BACI,SAACH,EAAD,CAAYI,GAAG,IAAf,mBACA,SAACJ,EAAD,CAAYI,GAAG,UAAf,qBAGX,C,uJCJYC,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChBC,EAAqED,EAArEC,MAAOC,EAA8DF,EAA9DE,aAAcC,EAAgDH,EAAhDG,aAAcC,EAAkCJ,EAAlCI,SAAUC,EAAwBL,EAAxBK,OAAQC,EAAgBN,EAAhBM,YACtDC,GAAcC,EAAAA,EAAAA,GAAOC,KAAKC,MAAMR,GAAe,QAC/CS,EAAM,iDAA4CL,GACpDM,GAAWC,EAAAA,EAAAA,MACf,OAEI,4BACI,2BACKP,GAAc,gBAAKQ,IAAKH,EAAQI,IAAKd,EAAOe,MAAM,SAAW,gBAAKF,IAAKG,EAAgBF,IAAI,iBAAiBC,MAAM,MAAOE,OAAO,SACjI,0BAAKjB,EAAL,KAAcM,EAAd,SACA,wCAAgBY,KAAKC,MAAqB,GAAfjB,GAA3B,QACA,sCACA,uBAAIC,KACJ,oCACA,uBAAIC,EAAOgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OAAmB,yBAAa,0BAAOA,KAAXD,EAA5B,UAEnB,mDACA,4BACI,SAAC,KAAD,CAAMxB,GAAE,OAAU0B,MAAOZ,EAASY,MAAlC,oBACA,SAAC,KAAD,CAAM1B,GAAE,UAAa0B,MAAOZ,EAASY,MAArC,0BAEJ,SAAC,KAAD,MAGX,E,6BCHD,EAnBqB,WAAO,IAAD,IACvB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMf,GAAWC,EAAAA,EAAAA,MACTS,GAAOM,EAAAA,EAAAA,MAAPN,GAQR,OANAO,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GAAgCR,GAC3BS,KAAKJ,GACLK,MAAMC,EAAAA,GAAAA,MAAY,yBAC1B,GAAE,CAACX,KAGA,iCACI,SAACzB,EAAA,EAAD,KACA,UAAC,KAAD,CAAMC,GAAE,oBAAEc,EAASY,aAAX,aAAE,EAAgBU,YAAlB,kBAAR,eAA8C,SAAC,MAAD,IAA9C,eACCR,IAAU,SAAC3B,EAAD,CAAUC,KAAM0B,MAGtC,C,mMCxBKS,EAAU,mCAGT,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACoBC,EAAAA,EAAAA,IAAA,gCAAmCH,EAAnC,kBAAoDE,IADxE,cACGE,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBH,EAAAA,EAAAA,IAAA,sCAAyCH,IAD7D,cACGI,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAqCC,GAArC,uFACoBL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,oBAAsCR,IAD1D,cACGI,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,uFACoBL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CR,IADlE,cACGI,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAmCF,GAAnC,uFACoBL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CR,IADlE,cACGI,EADH,yBAEIA,EAASC,MAFb,kEAtBPF,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/Layout/Layout.styled.js","components/Layout/Layout.js","components/FilmCard/FilmCard.js","pages/MovieDetails/MovieDetails.js","utils/FetchTMDB.js"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from 'styled-components';\n\nexport const LayoutLink = styled(NavLink)`\n  display: inline-block;\n  text-decoration: none;\n  padding: 12px;\n  font-weight: 500;\n  color: #2a363b;\n  font-size: 18px;\n  &.active {\n    color: #2196f3;\n  }\n`;\n","import { LayoutLink} from \"../Layout/Layout.styled\";\n\nexport const Layout = () => {\n    return (\n        <nav>\n            <LayoutLink to=\"/\">Home</LayoutLink>\n            <LayoutLink to=\"/movies\">Movie</LayoutLink>\n        </nav>\n    )\n}","import { format } from 'date-fns';\nimport { PropTypes } from 'prop-types';\nimport { Link, Outlet, useLocation } from 'react-router-dom';\nimport default_poster from '../../default_photos/default_poster.jpeg';\n\nexport const FilmCard = ({ film }) => {\n    const {title, release_date, vote_average, overview, genres, poster_path } = film;\n    const releaseYear = format(Date.parse(release_date), 'yyyy');\n    const poster =`https://www.themoviedb.org/t/p/original${poster_path}`\n  const location = useLocation()\n    return (\n             \n        <div>\n            <div>\n                {poster_path ? <img src={poster} alt={title} width='200' /> : <img src={default_poster} alt=\"default_poster\" width='200'  height='300'/>}\n                <h2>{title} ({releaseYear}) </h2>\n                <p>User Score: {Math.round(vote_average * 10)}%</p>\n                <h2>Overview</h2>\n                <p>{overview}</p>\n                <h2>Genres</h2>\n                <p>{genres.map(({ id, name }) => (<li key={id}><span>{name}</span></li>))}</p>\n            </div>\n            <p>Additional information</p>\n            <div>\n                <Link to={`cast`} state={location.state}> Cast</Link>\n                <Link to={`reviews`} state={location.state}> Reviews</Link>\n            </div>\n            <Outlet />\n        </div>\n    )\n};\n\nFilmCard.propTypes = {\n    film: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        release_date: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n        overview: PropTypes.string,\n        poster_path: PropTypes.string,\n        genres: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n        })).isRequired\n    }).isRequired\n}","import { useState, useEffect} from \"react\";\nimport * as FetchTMDB from \"utils/FetchTMDB\";\nimport { useParams,Link, useLocation } from 'react-router-dom';\nimport { FilmCard } from 'components/FilmCard/FilmCard';\nimport { toast } from \"react-hot-toast\";\nimport { AiOutlineArrowLeft } from \"react-icons/ai\";\nimport { Layout } from \"components/Layout/Layout\";\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState(null)\n    const location = useLocation();\n    const { id } = useParams();\n\n    useEffect(() => {\n        FetchTMDB.getFullInfoAboutMovie(id)\n            .then(setMovie)\n            .catch(toast.error('Oops, something wrong'))\n    }, [id])\n    \n    return (\n        <>\n            <Layout />\n            <Link to={location.state?.from ?? `/movies`}> <AiOutlineArrowLeft /> Go back </Link>\n            {movie && (<FilmCard film={movie} />)}\n        </>\n    )\n};\nexport default MovieDetails\n","import axios from 'axios';\n\nconst API_KEY = 'c28a60c35f7c1f6eafdc45cc0b774d29';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function searchMovies(searchQuery) {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${searchQuery}`)\n    return response.data\n};\n\nexport async function getTrendingToday() {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`)\n    return response.data\n};\n\nexport async function getFullInfoAboutMovie(movieId) {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`)\n    return response.data\n};\n\nexport async function getCastFromMovie(movieId) {\n    const response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`)\n    return response.data\n};\n\nexport async function getReviewsFromMovie(movieId) {\n    const response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`)\n    return response.data\n};\n\n// https://api.themoviedb.org/3/movie/411/?api_key=c28a60c35f7c1f6eafdc45cc0b774d29&poster_path=iREd0rNCjYdf5Ar0vfaW32yrkm.jpg"],"names":["LayoutLink","styled","NavLink","Layout","to","FilmCard","film","title","release_date","vote_average","overview","genres","poster_path","releaseYear","format","Date","parse","poster","location","useLocation","src","alt","width","default_poster","height","Math","round","map","id","name","state","useState","movie","setMovie","useParams","useEffect","FetchTMDB","then","catch","toast","from","API_KEY","searchMovies","searchQuery","axios","response","data","getTrendingToday","getFullInfoAboutMovie","movieId","getCastFromMovie","getReviewsFromMovie"],"sourceRoot":""}